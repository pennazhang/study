echo "CURRENT_DIR=$CURRENT_DIR"
echo "HOME_DIR=$HOME_DIR"

DOCKER_IMAGE_NAME=pccore
LINUX_VERSION=ubuntu:18.04

#if you want use GUI in the docker, then GUI_IN_DOCKER should be set to 1, or it should be set to 0.
USE_GUI_IN_DOCKER=0

# -------------------------------------------------------------------------------------------------------------
# The following setting is only for starting docker. (startDockerImage.sh)
# -------------------------------------------------------------------------------------------------------------

#Host name in the docker container, such as:  pzhang@DOCKER_HOST_NAME:
DOCKER_RUN_NAME=$DOCKER_IMAGE_NAME

#default dns is: 8.8.8.8. To find the dns, run the command in host: nmcli dev show | grep 'IP4.DNS'
#DNS_Map="--dns 192.168.0.1"
DNS_Map=

# Here we expose the TCP Server Port: 5023 for Command Shell.
#PORT_MAP="-p 5023:5023"
PORT_MAP=

# Add Environment only for this project.
#ADDITIONAL_ENV=" -e P4USER=PZhang  -e P4PORT=10.90.66.25:3501 "
ADDITIONAL_ENV=

#Add additional folder map to START_DOCKER_FOLDER_MAP, only for startDocker.sh
#START_DOCKER_FOLDER_MAP+=" -v $HOST_EXTRA_DIR:$DOCKER_EXTRA_DIR "

# -------------------------------------------------------------------------------------------------------------
# The following setting is only for building docker. (buildDockerImage.sh)
# -------------------------------------------------------------------------------------------------------------

#If you want to run setupEnv.sh automatically, you need to set BUILD_DEBUG_FLAG=0, and then the new docker image can be saved.
#If you don't want to run setupEnv.sh automatically, you need to set BUILD_DEBUG_FLAG=1, also the new docker image won't be saved.
BUILD_DEBUG_FLAG=0

#Host name in the building container, only useful when BUILD_DEBUG_FLAG=1
#Notive, in host name, '.' is invalid, and you can replace it with '_'
#for example: "qt4.8.7_debug" is not invalid, while "qt4_8_7_debug" is valid!
DOCKER_BUILD_NAME="${DOCKER_IMAGE_NAME}_debug"

#Add additional folder map to BUILD_DOCKER_FOLDER_MAP, only for buildDocker.sh
#BUILD_DOCKER_FOLDER_MAP+=" -v $HOST_EXTRA_DIR:$DOCKER_EXTRA_DIR "

#if there is some fixed files that can't be download from network(such as license files), just map HOST_CACHE_DIR here.
#DOCKER_CACHE_DIR can be mapped to docker as any folder. We suggest as: DOCKER_CACHE_DIR="/cacheData"
#Normally, we will do the following map when start a container with : " -v $HOST_CACHE_DIR:$DOCKER_CACHE_DIR"
#if not, then let it be None.
HOST_CACHE_DIR=${HOME_DIR}/workspace/infinity-linux-kernel/4.9.40-3/packages 
DOCKER_CACHE_DIR=/infinity_kernel

#This function will be called before building the docker image. Normally it should return 0.
#If you found some error and want to stop the building, the function should return any value other than 0.
function preBuildFunc (){
    # We can verify HOST_CACHE_DIR as below:
    if [ -z $HOST_CACHE_DIR -o -z $DOCKER_CACHE_DIR ]; then
    	echo "Please define HOST_CACHE_DIR and DOCKER_CACHE_DIR in $0!"
	return 1
    else
	if [ ! -d  $HOST_CACHE_DIR ]; then
	    echo "$HOST_CACHE_DIR is not exist!"
	    return 2
	fi
    fi

    # Just to install some other software
    if [ ! -f $HOST_CACHE_DIR/linux-headers-4.9.40-3-rt30_1.2.studer.infinity_amd64.deb ];then
	echo "Can't find the infinity kernel packege: $HOST_CACHE_DIR/linux-headers-4.9.40-3-rt30_1.2.studer.infinity_amd64.deb"
	return 3
    fi

    if [ ! -f $HOST_CACHE_DIR/linux-image-4.9.40-3-rt30_1.2.studer.infinity_amd64.deb ];then
	echo "Can't find the infinity kernel packege: $HOST_CACHE_DIR/linux-image-4.9.40-3-rt30_1.2.studer.infinity_amd64.deb"
	return 4
    fi
    return 0
}

