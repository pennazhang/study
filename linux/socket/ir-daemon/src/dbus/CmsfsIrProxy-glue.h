
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx___home_pzhang_temp_jetstream_daemons_ir_daemon_src_dbus_CmsfsIrProxy_glue_h__PROXY_MARSHAL_H
#define __dbusxx___home_pzhang_temp_jetstream_daemons_ir_daemon_src_dbus_CmsfsIrProxy_glue_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace com {
namespace harman {
namespace video {

class fs1_proxy
: public ::DBus::InterfaceProxy
{
public:

    fs1_proxy()
    : ::DBus::InterfaceProxy("com.harman.video.fs1")
    {
        connect_signal(fs1_proxy, DataChanged, _DataChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::string get(const std::string& key)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key;
        call.member("get");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    void set(const std::string& src, const std::string& key, const std::string& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << src;
        wi << key;
        wi << value;
        call.member("set");
        ::DBus::Message ret = invoke_method (call);
    }

    void setMulti(const std::string& src, const std::map< std::string, std::string >& keyvaluepairs)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << src;
        wi << keyvaluepairs;
        call.member("setMulti");
        ::DBus::Message ret = invoke_method (call);
    }

    std::map< std::string, std::string > getAll()
    {
        ::DBus::CallMessage call;
        call.member("getAll");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, std::string > argout;
        ri >> argout;
        return argout;
    }

    int32_t save(const std::string& filepath)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << filepath;
        call.member("save");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    bool reset()
    {
        ::DBus::CallMessage call;
        call.member("reset");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void DataChanged(const std::string& interface, const std::map< std::string, std::string >& jsonvalues) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _DataChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string interface;
        ri >> interface;
        std::map< std::string, std::string > jsonvalues;
        ri >> jsonvalues;
        DataChanged(interface, jsonvalues);
    }
};

} } } 
#endif //__dbusxx___home_pzhang_temp_jetstream_daemons_ir_daemon_src_dbus_CmsfsIrProxy_glue_h__PROXY_MARSHAL_H
