
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__adaptor_hpp__ADAPTOR_MARSHAL_H
#define __dbusxx__adaptor_hpp__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace com {
namespace example {

class Hello_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Hello_adaptor()
    : ::DBus::InterfaceAdaptor("com.example.Hello")
    {
        register_method(Hello_adaptor, SayHello, _SayHello_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument SayHello_args[] = 
        {
            { "name", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Hello_adaptor_methods[] = 
        {
            { "SayHello", SayHello_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Hello_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Hello_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Hello_adaptor_interface = 
        {
            "com.example.Hello",
            Hello_adaptor_methods,
            Hello_adaptor_signals,
            Hello_adaptor_properties
        };
        return &Hello_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void SayHello(const std::string& name) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _SayHello_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        SayHello(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } 
#endif //__dbusxx__adaptor_hpp__ADAPTOR_MARSHAL_H
